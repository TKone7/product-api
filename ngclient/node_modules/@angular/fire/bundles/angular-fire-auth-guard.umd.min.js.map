{"version":3,"sources":["ng://@angular/fire/auth-guard/auth-guard.ts","ng://@angular/fire/auth-guard/auth-guard.module.ts"],"names":["AngularFireAuthGuard","options","nameOrConfig","zone","router","_this","this","canActivate","next","state","authPipeFactory","data","loggedIn","authState","pipe","take","map","can","createUrlTree","auth","of","undefined","observeOn","ɵAngularFireSchedulers","outsideAngular","switchMap","runOutsideAngular","import","ɵfirebaseAppFactory","app","shareReplay","bufferSize","refCount","Observable","onAuthStateChanged","bind","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","NgZone","Router","user","isNotAnonymous","isAnonymous","idTokenResult","getIdTokenResult","emailVerified","customClaims","claims","AngularFireAuthGuardModule","NgModule","providers","authGuardPipe","claim","hasOwnProperty","redirect"],"mappings":"wkBAiBE,SAAAA,EAC4BC,EACaC,EACvCC,EACQC,GAJV,IAAAC,EAAAC,KAIUA,KAAAF,OAAAA,EAeVE,KAAAC,YAAW,SAAIC,EAA8BC,OACrCC,EAAkBF,EAAKG,KAAkB,eAAA,WAAgC,OAAAC,GAC/E,OAAOP,EAAKQ,UAAUC,KACpBC,EAAAA,KAAK,GACLL,EAAgBF,EAAMC,GACtBO,EAAAA,KAAG,SAACC,GAAO,MAAc,kBAAPA,EAAmBA,EAAMZ,EAAKD,OAAOc,cAAa,YAlBhEC,EAAOC,EAAAA,QAAGC,GAAWP,KACzBQ,EAAAA,UAAU,IAAIC,EAAAA,0BAAuBpB,GAAMqB,gBAC3CC,EAAAA,WAAS,WAAO,OAAAtB,EAAKuB,mBAAiB,WAAO,OAAAC,OAAO,uBACpDX,EAAAA,KAAG,WAAO,OAAAY,EAAAA,uBAAoB3B,EAASE,EAAMD,MAC7Cc,EAAAA,KAAG,SAACa,GAAO,OAAAA,EAAIV,UACfW,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,KAGzC1B,KAAKO,UAAYM,EAAKL,KACpBW,EAAAA,WAAS,SAACN,GAAQ,OAAA,IAAIc,EAAAA,WAAsBd,EAAKe,mBAAmBC,KAAKhB,mCAtB9EiB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EAOTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,4BAnBeC,EAAAA,cAC4BC,EAAAA,wOAkDtDjC,EAAqBI,EAAAA,KAAI,SAAA8B,GAAQ,QAAEA,KACnCC,EAA2B/B,EAAAA,KAAI,SAAA8B,GAAQ,QAAEA,IAASA,EAAKE,eACvDC,EAAgBxB,EAAAA,WAAU,SAACqB,GAAoB,OAAAA,EAAOA,EAAKI,mBAAqB9B,EAAAA,GAAG,SACnF+B,EAA0BnC,EAAAA,KAAI,SAAA8B,GAAQ,QAAEA,GAAQA,EAAKK,iBACrDC,EAAetC,EAAAA,KAAKmC,EAAejC,EAAAA,KAAI,SAAAiC,GAAiB,OAAAA,EAAgBA,EAAcI,OAAS,oBCpD5G,SAAAC,KAG0C,2BAHzCC,EAAAA,SAAQlB,KAAA,CAAC,CACRmB,UAAW,CAAExD,OAE2BsD,2EDyClB,SAAIxC,GAA4B,MAAA,CACpDP,YAAa,CAAEP,GAAwBW,KAAM,CAAE8C,cAAe3C,yDAQvC,SAAI4C,GAAiB,OAAA5C,EAAAA,KAAKsC,EAAcpC,EAAAA,KAAG,SAACqC,GAAW,OAAAA,EAAOM,eAAeD,+EAEzE,SAAIE,GAAqB,OAAA9C,EAAAA,KAAKF,EAAUI,EAAAA,KAAG,SAACJ,GAAY,OAAAA,GAAYgD,IAAY,gCAD5E,SAAIA,GAAoB,OAAA9C,EAAAA,KAAKF,EAAUI,EAAAA,KAAG,SAACJ,GAAY,OAAAA,GAAYgD","sourcesContent":["import { Injectable, Inject, Optional, NgZone } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable, of, pipe, UnaryFunction } from 'rxjs';\nimport { map, switchMap, take, observeOn, shareReplay } from 'rxjs/operators'\nimport { User } from 'firebase/app';\nimport { ɵAngularFireSchedulers, FirebaseOptions, FirebaseAppConfig, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵfirebaseAppFactory } from '@angular/fire';\n\nexport type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport type AuthPipe = UnaryFunction<Observable<User|null>, Observable<boolean|any[]>>;\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuthGuard implements CanActivate {\n\n  authState: Observable<User|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    zone: NgZone,\n    private router: Router\n  ) {\n    const auth = of(undefined).pipe(\n      observeOn(new ɵAngularFireSchedulers(zone).outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.auth()),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    this.authState = auth.pipe(\n      switchMap(auth => new Observable<User|null>(auth.onAuthStateChanged.bind(auth)))\n    );\n  }\n\n  canActivate = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n    const authPipeFactory = next.data.authGuardPipe as AuthPipeGenerator || (() => loggedIn);\n    return this.authState.pipe(\n      take(1),\n      authPipeFactory(next, state),\n      map(can => typeof can == \"boolean\" ? can : this.router.createUrlTree(<any[]>can))\n    );\n  }\n\n}\n\nexport const canActivate = (pipe: AuthPipeGenerator) => ({\n    canActivate: [ AngularFireAuthGuard ], data: { authGuardPipe: pipe }\n});\n\nexport const loggedIn: AuthPipe = map(user => !!user);\nexport const isNotAnonymous: AuthPipe = map(user => !!user && !user.isAnonymous);\nexport const idTokenResult = switchMap((user: User|null) => user ? user.getIdTokenResult() : of(null));\nexport const emailVerified: AuthPipe = map(user => !!user && user.emailVerified);\nexport const customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nexport const hasCustomClaim = (claim:string) => pipe(customClaims, map(claims =>  claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo = (redirect: any[]) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo = (redirect: any[]) =>  pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));","import { NgModule } from '@angular/core';\nimport { AngularFireAuthGuard } from './auth-guard';\n\n@NgModule({\n  providers: [ AngularFireAuthGuard ]\n})\nexport class AngularFireAuthGuardModule { }\n"]}