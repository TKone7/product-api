/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createUploadTask } from './task';
import { from } from 'rxjs';
/**
 * @record
 */
export function AngularFireStorageReference() { }
if (false) {
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.getDownloadURL = function () { };
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.getMetadata = function () { };
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.delete = function () { };
    /**
     * @param {?} path
     * @return {?}
     */
    AngularFireStorageReference.prototype.child = function (path) { };
    /**
     * @param {?} meta
     * @return {?}
     */
    AngularFireStorageReference.prototype.updateMetatdata = function (meta) { };
    /**
     * @param {?} meta
     * @return {?}
     */
    AngularFireStorageReference.prototype.updateMetadata = function (meta) { };
    /**
     * @param {?} data
     * @param {?=} metadata
     * @return {?}
     */
    AngularFireStorageReference.prototype.put = function (data, metadata) { };
    /**
     * @param {?} data
     * @param {?=} format
     * @param {?=} metadata
     * @return {?}
     */
    AngularFireStorageReference.prototype.putString = function (data, format, metadata) { };
}
/**
 * Create an AngularFire wrapped Storage Reference. This object
 * creates observable methods from promise based methods.
 * @param {?} ref
 * @param {?} schedulers
 * @param {?} keepUnstableUntilFirst
 * @return {?}
 */
export function createStorageRef(ref, schedulers, keepUnstableUntilFirst) {
    return {
        getDownloadURL: (/**
         * @return {?}
         */
        function () { return from(ref.getDownloadURL(), schedulers.outsideAngular).pipe(keepUnstableUntilFirst); }),
        getMetadata: (/**
         * @return {?}
         */
        function () { return from(ref.getMetadata()).pipe(keepUnstableUntilFirst); }),
        delete: (/**
         * @return {?}
         */
        function () { return from(ref.delete()); }),
        child: (/**
         * @param {?} path
         * @return {?}
         */
        function (path) { return createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst); }),
        updateMetatdata: (/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return from(ref.updateMetadata(meta)); }),
        updateMetadata: (/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return from(ref.updateMetadata(meta)); }),
        put: (/**
         * @param {?} data
         * @param {?=} metadata
         * @return {?}
         */
        function (data, metadata) {
            /** @type {?} */
            var task = ref.put(data, metadata);
            return createUploadTask(task);
        }),
        putString: (/**
         * @param {?} data
         * @param {?=} format
         * @param {?=} metadata
         * @return {?}
         */
        function (data, format, metadata) {
            /** @type {?} */
            var task = ref.putString(data, format, metadata);
            return createUploadTask(task);
        })
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXIvZmlyZS9zdG9yYWdlLyIsInNvdXJjZXMiOlsicmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQXlCLE1BQU0sUUFBUSxDQUFDO0FBQ2pFLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFHeEMsaURBU0M7Ozs7O0lBUkMsdUVBQWtDOzs7O0lBQ2xDLG9FQUErQjs7OztJQUMvQiwrREFBMEI7Ozs7O0lBQzFCLGtFQUF5Qjs7Ozs7SUFDekIsNEVBQXlEOzs7OztJQUN6RCwyRUFBd0Q7Ozs7OztJQUN4RCwwRUFBNkU7Ozs7Ozs7SUFDN0Usd0ZBQW1IOzs7Ozs7Ozs7O0FBUXJILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsR0FBYyxFQUNkLFVBQWtDLEVBQ2xDLHNCQUFpRTtJQUVqRSxPQUFPO1FBQ0wsY0FBYzs7O1FBQUUsY0FBTSxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDOUUsc0JBQXNCLENBQ3ZCLEVBRnFCLENBRXJCLENBQUE7UUFDRCxXQUFXOzs7UUFBRSxjQUFNLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0Msc0JBQXNCLENBQ3ZCLEVBRmtCLENBRWxCLENBQUE7UUFDRCxNQUFNOzs7UUFBRSxjQUFNLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFsQixDQUFrQixDQUFBO1FBQ2hDLEtBQUs7Ozs7UUFBRSxVQUFDLElBQVksSUFBSyxPQUFBLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixDQUFDLEVBQXJFLENBQXFFLENBQUE7UUFDOUYsZUFBZTs7OztRQUFFLFVBQUMsSUFBc0IsSUFBSyxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQTlCLENBQThCLENBQUE7UUFDM0UsY0FBYzs7OztRQUFFLFVBQUMsSUFBc0IsSUFBSyxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQTlCLENBQThCLENBQUE7UUFDMUUsR0FBRzs7Ozs7UUFBRSxVQUFDLElBQVMsRUFBRSxRQUF5Qjs7Z0JBQ2xDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7WUFDcEMsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUE7UUFDRCxTQUFTOzs7Ozs7UUFBRSxVQUFDLElBQVksRUFBRSxNQUFxQixFQUFFLFFBQXlCOztnQkFDbEUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUM7WUFDbEQsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUE7S0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNldHRhYmxlTWV0YWRhdGEsIFVwbG9hZE1ldGFkYXRhLCBSZWZlcmVuY2UsIFN0cmluZ0Zvcm1hdCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBjcmVhdGVVcGxvYWRUYXNrLCBBbmd1bGFyRmlyZVVwbG9hZFRhc2sgfSBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMgfSBmcm9tICdAYW5ndWxhci9maXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyRmlyZVN0b3JhZ2VSZWZlcmVuY2Uge1xuICBnZXREb3dubG9hZFVSTCgpOiBPYnNlcnZhYmxlPGFueT47XG4gIGdldE1ldGFkYXRhKCk6IE9ic2VydmFibGU8YW55PjtcbiAgZGVsZXRlKCk6IE9ic2VydmFibGU8YW55PjtcbiAgY2hpbGQocGF0aDogc3RyaW5nKTogYW55O1xuICB1cGRhdGVNZXRhdGRhdGEobWV0YTogU2V0dGFibGVNZXRhZGF0YSk6IE9ic2VydmFibGU8YW55PjtcbiAgdXBkYXRlTWV0YWRhdGEobWV0YTogU2V0dGFibGVNZXRhZGF0YSk6IE9ic2VydmFibGU8YW55PjtcbiAgcHV0KGRhdGE6IGFueSwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSB8IHVuZGVmaW5lZCk6IEFuZ3VsYXJGaXJlVXBsb2FkVGFzaztcbiAgcHV0U3RyaW5nKGRhdGE6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nIHwgdW5kZWZpbmVkLCBtZXRhZGF0YT86IFVwbG9hZE1ldGFkYXRhIHwgdW5kZWZpbmVkKTogQW5ndWxhckZpcmVVcGxvYWRUYXNrO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBBbmd1bGFyRmlyZSB3cmFwcGVkIFN0b3JhZ2UgUmVmZXJlbmNlLiBUaGlzIG9iamVjdFxuICogY3JlYXRlcyBvYnNlcnZhYmxlIG1ldGhvZHMgZnJvbSBwcm9taXNlIGJhc2VkIG1ldGhvZHMuXG4gKiBAcGFyYW0gcmVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yYWdlUmVmKFxuICByZWY6IFJlZmVyZW5jZSxcbiAgc2NoZWR1bGVyczogybVBbmd1bGFyRmlyZVNjaGVkdWxlcnMsXG4gIGtlZXBVbnN0YWJsZVVudGlsRmlyc3Q6IDxUPihvYnMkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPYnNlcnZhYmxlPFQ+XG4pOiBBbmd1bGFyRmlyZVN0b3JhZ2VSZWZlcmVuY2Uge1xuICByZXR1cm4ge1xuICAgIGdldERvd25sb2FkVVJMOiAoKSA9PiBmcm9tKHJlZi5nZXREb3dubG9hZFVSTCgpLCBzY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKS5waXBlKFxuICAgICAga2VlcFVuc3RhYmxlVW50aWxGaXJzdFxuICAgICksXG4gICAgZ2V0TWV0YWRhdGE6ICgpID0+IGZyb20ocmVmLmdldE1ldGFkYXRhKCkpLnBpcGUoXG4gICAgICBrZWVwVW5zdGFibGVVbnRpbEZpcnN0XG4gICAgKSxcbiAgICBkZWxldGU6ICgpID0+IGZyb20ocmVmLmRlbGV0ZSgpKSxcbiAgICBjaGlsZDogKHBhdGg6IHN0cmluZykgPT4gY3JlYXRlU3RvcmFnZVJlZihyZWYuY2hpbGQocGF0aCksIHNjaGVkdWxlcnMsIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QpLFxuICAgIHVwZGF0ZU1ldGF0ZGF0YTogKG1ldGE6IFNldHRhYmxlTWV0YWRhdGEpID0+IGZyb20ocmVmLnVwZGF0ZU1ldGFkYXRhKG1ldGEpKSxcbiAgICB1cGRhdGVNZXRhZGF0YTogKG1ldGE6IFNldHRhYmxlTWV0YWRhdGEpID0+IGZyb20ocmVmLnVwZGF0ZU1ldGFkYXRhKG1ldGEpKSxcbiAgICBwdXQ6IChkYXRhOiBhbnksIG1ldGFkYXRhPzogVXBsb2FkTWV0YWRhdGEpID0+IHtcbiAgICAgIGNvbnN0IHRhc2sgPSByZWYucHV0KGRhdGEsIG1ldGFkYXRhKTtcbiAgICAgIHJldHVybiBjcmVhdGVVcGxvYWRUYXNrKHRhc2spO1xuICAgIH0sXG4gICAgcHV0U3RyaW5nOiAoZGF0YTogc3RyaW5nLCBmb3JtYXQ/OiBTdHJpbmdGb3JtYXQsIG1ldGFkYXRhPzogVXBsb2FkTWV0YWRhdGEpID0+IHtcbiAgICAgIGNvbnN0IHRhc2sgPSByZWYucHV0U3RyaW5nKGRhdGEsIGZvcm1hdCwgbWV0YWRhdGEpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVVwbG9hZFRhc2sodGFzayk7XG4gICAgfVxuICB9O1xufVxuIl19