{"version":3,"file":"zxing-ngx-scanner.js","sources":["ng://@zxing/ngx-scanner/lib/browser-multi-format-continuous-reader.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.component.ts","ng://@zxing/ngx-scanner/lib/zxing-scanner.module.ts","ng://@zxing/ngx-scanner/public_api.ts","ng://@zxing/ngx-scanner/zxing-ngx-scanner.ts"],"sourcesContent":["/// <reference path=\"./image-capture.d.ts\" />\n\nimport { BrowserMultiFormatReader, ChecksumException, FormatException, NotFoundException, Result } from '@zxing/library';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ResultAndError } from './ResultAndError';\n\n/**\n * Based on zxing-typescript BrowserCodeReader\n */\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\n\n  /**\n   * Exposes _tochAvailable .\n   */\n  public get isTorchAvailable(): Observable<boolean> {\n    return this._isTorchAvailable.asObservable();\n  }\n\n  /**\n   * Says if there's a torch available for the current device.\n   */\n  private _isTorchAvailable = new BehaviorSubject<boolean>(undefined);\n\n  /**\n   * The device id of the current media device.\n   */\n  private deviceId: string;\n\n  /**\n   * If there's some scan stream open, it shal be here.\n   */\n  private scanStream: BehaviorSubject<ResultAndError>;\n\n  /**\n   * Starts the decoding from the current or a new video element.\n   *\n   * @param callbackFn The callback to be executed after every scan attempt\n   * @param deviceId The device's to be used Id\n   * @param videoSource A new video element\n   */\n  public continuousDecodeFromInputVideoDevice(\n    deviceId?: string,\n    videoSource?: HTMLVideoElement\n  ): Observable<ResultAndError> {\n\n    this.reset();\n\n    // Keeps the deviceId between scanner resets.\n    if (typeof deviceId !== 'undefined') {\n      this.deviceId = deviceId;\n    }\n\n    if (typeof navigator === 'undefined') {\n      return;\n    }\n\n    const scan$ = new BehaviorSubject<ResultAndError>({});\n\n    try {\n      // this.decodeFromInputVideoDeviceContinuously(deviceId, videoSource, (result, error) => scan$.next({ result, error }));\n      this.getStreamForDevice({ deviceId })\n        .then(stream => this.attachStreamToVideoAndCheckTorch(stream, videoSource))\n        .then(videoElement => this.decodeOnSubject(scan$, videoElement, this.timeBetweenScansMillis));\n    } catch (e) {\n      scan$.error(e);\n    }\n\n    this._setScanStream(scan$);\n\n    // @todo Find a way to emit a complete event on the scan stream once it's finished.\n\n    return scan$.asObservable();\n  }\n\n  /**\n   * Gets the media stream for certain device.\n   * Falls back to any available device if no `deviceId` is defined.\n   */\n  public async getStreamForDevice({ deviceId }: Partial<MediaDeviceInfo>): Promise<MediaStream> {\n    const constraints = this.getUserMediaConstraints(deviceId);\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    return stream;\n  }\n\n  /**\n   * Creates media steram constraints for certain `deviceId`.\n   * Falls back to any environment available device if no `deviceId` is defined.\n   */\n  public getUserMediaConstraints(deviceId: string): MediaStreamConstraints {\n\n    const video = typeof deviceId === 'undefined'\n      ? { facingMode: { exact: 'environment' } }\n      : { deviceId: { exact: deviceId } };\n\n    const constraints: MediaStreamConstraints = { video };\n\n    return constraints;\n  }\n\n  /**\n   * Enables and disables the device torch.\n   */\n  public setTorch(on: boolean): void {\n\n    if (!this._isTorchAvailable.value) {\n      // compatibility not checked yet\n      return;\n    }\n\n    const tracks = this.getVideoTracks(this.stream);\n\n    if (on) {\n      this.applyTorchOnTracks(tracks, true);\n    } else {\n      this.applyTorchOnTracks(tracks, false);\n      // @todo check possibility to disable torch without restart\n      this.restart();\n    }\n  }\n\n  /**\n   * Update the torch compatibility state and attachs the stream to the preview element.\n   */\n  private attachStreamToVideoAndCheckTorch(stream: MediaStream, videoSource: HTMLVideoElement): Promise<HTMLVideoElement> {\n    this.updateTorchCompatibility(stream);\n    return this.attachStreamToVideo(stream, videoSource);\n  }\n\n  /**\n   * Checks if the stream supports torch control.\n   *\n   * @param stream The media stream used to check.\n   */\n  private async updateTorchCompatibility(stream: MediaStream): Promise<void> {\n\n    const tracks = this.getVideoTracks(stream);\n\n    for (const track of tracks) {\n      if (await this.isTorchCompatible(track)) {\n        this._isTorchAvailable.next(true);\n        break;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param stream The video stream where the tracks gonna be extracted from.\n   */\n  private getVideoTracks(stream: MediaStream) {\n    let tracks = [];\n    try {\n      tracks = stream.getVideoTracks();\n    }\n    finally {\n      return tracks || [];\n    }\n  }\n\n  /**\n   *\n   * @param track The media stream track that will be checked for compatibility.\n   */\n  private async isTorchCompatible(track: MediaStreamTrack) {\n\n    let compatible = false;\n\n    try {\n      const imageCapture = new ImageCapture(track);\n      const capabilities = await imageCapture.getPhotoCapabilities();\n      compatible = !!capabilities['torch'] || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\n    }\n    finally {\n      return compatible;\n    }\n  }\n\n  /**\n   * Apply the torch setting in all received tracks.\n   */\n  private applyTorchOnTracks(tracks: MediaStreamTrack[], state: boolean) {\n    tracks.forEach(track => track.applyConstraints({\n      advanced: [<any>{ torch: state, fillLightMode: state ? 'torch' : 'none' }]\n    }));\n  }\n\n  /**\n   * Correctly sets a new scanStream value.\n   */\n  private _setScanStream(scan$: BehaviorSubject<ResultAndError>): void {\n    // cleans old stream\n    this._cleanScanStream();\n    // sets new stream\n    this.scanStream = scan$;\n  }\n\n  /**\n   * Cleans any old scan stream value.\n   */\n  private _cleanScanStream(): void {\n\n    if (this.scanStream && !this.scanStream.isStopped) {\n      this.scanStream.complete();\n    }\n\n    this.scanStream = null;\n  }\n\n  /**\n   * Decodes values in a stream with delays between scans.\n   *\n   * @param scan$ The subject to receive the values.\n   * @param videoElement The video element the decode will be applied.\n   * @param delay The delay between decode results.\n   */\n  private decodeOnSubject(scan$: BehaviorSubject<ResultAndError>, videoElement: HTMLVideoElement, delay: number): void {\n\n    // stops loop\n    if (scan$.isStopped) {\n      return;\n    }\n\n    let result: Result;\n\n    try {\n      result = this.decode(videoElement);\n      scan$.next({ result });\n    } catch (error) {\n      // stream cannot stop on fails.\n      if (\n        !error ||\n        // scan Failure - found nothing, no error\n        error instanceof NotFoundException ||\n        // scan Error - found the QR but got error on decoding\n        error instanceof ChecksumException ||\n        error instanceof FormatException\n      ) {\n        scan$.next({ error });\n      } else {\n        scan$.error(error);\n      }\n    } finally {\n      const timeout = !result ? 0 : delay;\n      setTimeout(() => this.decodeOnSubject(scan$, videoElement, delay), timeout);\n    }\n  }\n\n  /**\n   * Restarts the scanner.\n   */\n  private restart(): Observable<ResultAndError> {\n    // reset\n    // start\n    return this.continuousDecodeFromInputVideoDevice(this.deviceId, this.videoElement);\n  }\n\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n} from '@angular/core';\n\nimport {\n  ArgumentException,\n  BarcodeFormat,\n  DecodeHintType,\n  Exception,\n  Result\n} from '@zxing/library';\n\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\nimport { ResultAndError } from './ResultAndError';\n\n@Component({\n  selector: 'zxing-scanner',\n  templateUrl: './zxing-scanner.component.html',\n  styleUrls: ['./zxing-scanner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy {\n\n  /**\n   * Supported Hints map.\n   */\n  private _hints: Map<DecodeHintType, any> | null;\n\n  /**\n   * The ZXing code reader.\n   */\n  private _codeReader: BrowserMultiFormatContinuousReader;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _device: MediaDeviceInfo;\n\n  /**\n   * The device that should be used to scan things.\n   */\n  private _enabled: boolean;\n\n  /**\n   *\n   */\n  private _isAutostarting: boolean;\n\n  /**\n   * Has `navigator` access.\n   */\n  private hasNavigator: boolean;\n\n  /**\n   * Says if some native API is supported.\n   */\n  private isMediaDevicesSuported: boolean;\n\n  /**\n   * If the user-agent allowed the use of the camera or not.\n   */\n  private hasPermission: boolean | null;\n\n  /**\n   * Reference to the preview element, should be the `video` tag.\n   */\n  @ViewChild('preview', { static: true })\n  previewElemRef: ElementRef<HTMLVideoElement>;\n\n  /**\n   * Enable or disable autofocus of the camera (might have an impact on performance)\n   */\n  @Input()\n  autofocusEnabled: boolean;\n\n  /**\n   * Emits when and if the scanner is autostarted.\n   */\n  @Output()\n  autostarted: EventEmitter<void>;\n\n  /**\n   * True during autostart and false after. It will be null if won't autostart at all.\n   */\n  @Output()\n  autostarting: EventEmitter<boolean | null>;\n\n  /**\n   * If the scanner should autostart with the first available device.\n   */\n  @Input()\n  autostart: boolean;\n\n  /**\n   * How the preview element shoud be fit inside the :host container.\n   */\n  @Input()\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\n\n  /**\n   * Emitts events when the torch compatibility is changed.\n   */\n  @Output()\n  torchCompatible: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\n   */\n  @Output()\n  scanSuccess: EventEmitter<string>;\n\n  /**\n   * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\n   */\n  @Output()\n  scanFailure: EventEmitter<Exception | undefined>;\n\n  /**\n   * Emitts events when a scan throws some error, will inject the error to the callback.\n   */\n  @Output()\n  scanError: EventEmitter<Error>;\n\n  /**\n   * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\n   */\n  @Output()\n  scanComplete: EventEmitter<Result>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\n\n  /**\n   * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\n   */\n  @Output()\n  camerasNotFound: EventEmitter<any>;\n\n  /**\n   * Emitts events when the users answers for permission.\n   */\n  @Output()\n  permissionResponse: EventEmitter<boolean>;\n\n  /**\n   * Emitts events when has devices status is update.\n   */\n  @Output()\n  hasDevices: EventEmitter<boolean>;\n\n  /**\n   * Exposes the current code reader, so the user can use it's APIs.\n   */\n  get codeReader(): BrowserMultiFormatContinuousReader {\n    return this._codeReader;\n  }\n\n  /**\n   * User device input\n   */\n  @Input()\n  set device(device: MediaDeviceInfo | null) {\n\n    if (!device && device !== null) {\n      throw new ArgumentException('The `device` must be a valid MediaDeviceInfo or null.');\n    }\n\n    if (this.isCurrentDevice(device)) {\n      console.warn('Setting the same device is not allowed.');\n      return;\n    }\n\n    if (this.isAutostarting) {\n      // do not allow setting devices during auto-start, since it will set one and emit it.\n      console.warn('Avoid setting a device during auto-start.');\n      return;\n    }\n\n    if (!this.hasPermission) {\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\n      // this.permissionResponse\n      //   .pipe(\n      //     take(1),\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\n      //   )\n      //   .subscribe(() => this.device = device);\n      // return;\n    }\n\n    // in order to change the device the codeReader gotta be reseted\n    this._reset();\n\n    this._device = device;\n\n    // if enabled, starts scanning\n    if (this._enabled && device !== null) {\n      this.scanFromDevice(device.deviceId);\n    }\n  }\n\n  /**\n   * Emits when the current device is changed.\n   */\n  @Output()\n  deviceChange: EventEmitter<MediaDeviceInfo>;\n\n  /**\n   * User device acessor.\n   */\n  get device() {\n    return this._device;\n  }\n\n  /**\n   * Returns all the registered formats.\n   */\n  get formats(): BarcodeFormat[] {\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\n  }\n\n  /**\n   * Registers formats the scanner should support.\n   *\n   * @param input BarcodeFormat or case-insensitive string array.\n   */\n  @Input()\n  set formats(input: BarcodeFormat[]) {\n\n    if (typeof input === 'string') {\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\n    }\n\n    // formats may be set from html template as BarcodeFormat or string array\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\n\n    const hints = this.hints;\n\n    // updates the hints\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n\n    this.hints = hints;\n  }\n\n  /**\n   * Returns all the registered hints.\n   */\n  get hints() {\n    return this._hints;\n  }\n\n  /**\n   * Does what it takes to set the hints.\n   */\n  set hints(hints: Map<DecodeHintType, any>) {\n\n    this._hints = hints;\n\n    // @note avoid restarting the code reader when possible\n\n    // new instance with new hints.\n    this.restart();\n  }\n\n  /**\n   *\n   */\n  set isAutostarting(state: boolean | null) {\n    this._isAutostarting = state;\n    this.autostarting.next(state);\n  }\n\n  /**\n   *\n   */\n  get isAutstarting(): boolean | null {\n    return this._isAutostarting;\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set torch(on: boolean) {\n    this.getCodeReader().setTorch(on);\n  }\n\n  /**\n   * Allow start scan or not.\n   */\n  @Input()\n  set enable(enabled: boolean) {\n\n    this._enabled = Boolean(enabled);\n\n    if (!this._enabled) {\n      this.reset();\n    } else if (this.device) {\n      this.scanFromDevice(this.device.deviceId);\n    }\n  }\n\n  /**\n   * Tells if the scanner is enabled or not.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * If is `tryHarder` enabled.\n   */\n  get tryHarder(): boolean {\n    return this.hints.get(DecodeHintType.TRY_HARDER);\n  }\n\n  /**\n   * Enable/disable tryHarder hint.\n   */\n  @Input()\n  set tryHarder(enable: boolean) {\n\n    const hints = this.hints;\n\n    if (enable) {\n      hints.set(DecodeHintType.TRY_HARDER, true);\n    } else {\n      hints.delete(DecodeHintType.TRY_HARDER);\n    }\n\n    this.hints = hints;\n  }\n\n  /**\n   * Constructor to build the object and do some DI.\n   */\n  constructor() {\n    // instance based emitters\n    this.autostarted = new EventEmitter();\n    this.autostarting = new EventEmitter();\n    this.torchCompatible = new EventEmitter();\n    this.scanSuccess = new EventEmitter();\n    this.scanFailure = new EventEmitter();\n    this.scanError = new EventEmitter();\n    this.scanComplete = new EventEmitter();\n    this.camerasFound = new EventEmitter();\n    this.camerasNotFound = new EventEmitter();\n    this.permissionResponse = new EventEmitter(true);\n    this.hasDevices = new EventEmitter();\n    this.deviceChange = new EventEmitter();\n\n    this._device = null;\n    this._enabled = true;\n    this._hints = new Map<DecodeHintType, any>();\n    this.autofocusEnabled = true;\n    this.autostart = true;\n    this.formats = [BarcodeFormat.QR_CODE];\n\n    // computed data\n    this.hasNavigator = typeof navigator !== 'undefined';\n    this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\n  }\n\n  /**\n   * Gets and registers all cammeras.\n   */\n  async askForPermission(): Promise<boolean> {\n\n    if (!this.hasNavigator) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    if (!this.isMediaDevicesSuported) {\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\n      this.setPermission(null);\n      return this.hasPermission;\n    }\n\n    let stream: MediaStream;\n    let permission: boolean;\n\n    try {\n      // Will try to ask for permission\n      stream = await this.getAnyVideoDevice();\n      permission = !!stream;\n    } catch (err) {\n      return this.handlePermissionException(err);\n    } finally {\n      this.terminateStream(stream);\n    }\n\n    this.setPermission(permission);\n\n    // Returns the permission\n    return permission;\n  }\n\n  /**\n   *\n   */\n  getAnyVideoDevice(): Promise<MediaStream> {\n    return navigator.mediaDevices.getUserMedia({ video: true });\n  }\n\n  /**\n   * Terminates a stream and it's tracks.\n   */\n  private terminateStream(stream: MediaStream) {\n\n    if (stream) {\n      stream.getTracks().forEach(t => t.stop());\n    }\n\n    stream = undefined;\n  }\n\n  /**\n   * Initializes the component without starting the scanner.\n   */\n  private initAutostartOff(): void {\n\n    // do not ask for permission when autostart is off\n    this.isAutostarting = null;\n\n    // just update devices information\n    this.updateVideoInputDevices();\n  }\n\n  /**\n   * Initializes the component and starts the scanner.\n   * Permissions are asked to accomplish that.\n   */\n  private async initAutostartOn(): Promise<void> {\n\n    this.isAutostarting = true;\n\n    let hasPermission: boolean;\n\n    try {\n      // Asks for permission before enumerating devices so it can get all the device's info\n      hasPermission = await this.askForPermission();\n    } catch (e) {\n      console.error('Exception occurred while asking for permission:', e);\n      return;\n    }\n\n    // from this point, things gonna need permissions\n    if (hasPermission) {\n      const devices = await this.updateVideoInputDevices();\n      this.autostartScanner([...devices]);\n    }\n  }\n\n  /**\n   * Checks if the given device is the current defined one.\n   */\n  isCurrentDevice(device: MediaDeviceInfo) {\n    return this.device && device && device.deviceId === this.device.deviceId;\n  }\n\n  /**\n   * Executed after the view initialization.\n   */\n  ngAfterViewInit(): void {\n\n    // makes torch availability information available to user\n    this.getCodeReader().isTorchAvailable.subscribe(x => this.torchCompatible.emit(x));\n\n    if (!this.autostart) {\n      console.warn('New feature \\'autostart\\' disabled, be careful. Permissions and devices recovery has to be run manually.');\n\n      // does the necessary configuration without autostarting\n      this.initAutostartOff();\n\n      return;\n    }\n\n    // configurates the component and starts the scanner\n    this.initAutostartOn();\n  }\n\n  /**\n   * Executes some actions before destroy the component.\n   */\n  ngOnDestroy(): void {\n    this.reset();\n  }\n\n  /**\n   * Stops old `codeReader` and starts scanning in a new one.\n   */\n  restart(): void {\n\n    const prevDevice = this._reset();\n\n    if (!prevDevice) {\n      return;\n    }\n\n    // @note apenas necessario por enquanto causa da Torch\n    this._codeReader = undefined;\n    this.device = prevDevice;\n  }\n\n  /**\n   * Discovers and updates known video input devices.\n   */\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\n\n    // permissions aren't needed to get devices, but to access them and their info\n    const devices = await this.getCodeReader().listVideoInputDevices() || [];\n    const hasDevices = devices && devices.length > 0;\n\n    // stores discovered devices and updates information\n    this.hasDevices.next(hasDevices);\n    this.camerasFound.next([...devices]);\n\n    if (!hasDevices) {\n      this.camerasNotFound.next();\n    }\n\n    return devices;\n  }\n\n  /**\n   * Starts the scanner with the back camera otherwise take the last\n   * available device.\n   */\n  private autostartScanner(devices: MediaDeviceInfo[]) {\n\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\n\n    // select the rear camera by default, otherwise take the last camera.\n    const device = devices.find(matcher) || devices.pop();\n\n    if (!device) {\n      throw new Error('Impossible to autostart, no input devices available.');\n    }\n\n    this.device = device;\n    // @note when listening to this change, callback code will sometimes run before the previous line.\n    this.deviceChange.emit(device);\n\n    this.isAutostarting = false;\n    this.autostarted.next();\n  }\n\n  /**\n   * Dispatches the scan success event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanSuccess(result: Result): void {\n    this.scanSuccess.next(result.getText());\n  }\n\n  /**\n   * Dispatches the scan failure event.\n   */\n  private dispatchScanFailure(reason?: Exception): void {\n    this.scanFailure.next(reason);\n  }\n\n  /**\n   * Dispatches the scan error event.\n   *\n   * @param error the error thing.\n   */\n  private dispatchScanError(error: any): void {\n    this.scanError.next(error);\n  }\n\n  /**\n   * Dispatches the scan event.\n   *\n   * @param result the scan result.\n   */\n  private dispatchScanComplete(result: Result): void {\n    this.scanComplete.next(result);\n  }\n\n  /**\n   * Returns the filtered permission.\n   */\n  private handlePermissionException(err: DOMException): boolean {\n\n    // failed to grant permission to video input\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\n\n    let permission: boolean;\n\n    switch (err.name) {\n\n      // usually caused by not secure origins\n      case 'NotSupportedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // could not claim\n        permission = null;\n        // can't check devices\n        this.hasDevices.next(null);\n        break;\n\n      // user denied permission\n      case 'NotAllowedError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // claimed and denied permission\n        permission = false;\n        // this means that input devices exists\n        this.hasDevices.next(true);\n        break;\n\n      // the device has no attached input devices\n      case 'NotFoundError':\n        console.warn('@zxing/ngx-scanner', err.message);\n        // no permissions claimed\n        permission = null;\n        // because there was no devices\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      case 'NotReadableError':\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\n        // no permissions claimed\n        permission = null;\n        // there are devices, which I couldn't use\n        this.hasDevices.next(false);\n        // tells the listener about the error\n        this.camerasNotFound.next(err);\n        break;\n\n      default:\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\n        // unknown\n        permission = null;\n        // this.hasDevices.next(undefined;\n        break;\n\n    }\n\n    this.setPermission(permission);\n\n    // tells the listener about the error\n    this.permissionResponse.error(err);\n\n    return permission;\n  }\n\n  /**\n   * Returns a valid BarcodeFormat or fails.\n   */\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\n    return typeof format === 'string'\n      ? BarcodeFormat[format.trim().toUpperCase()]\n      : format;\n  }\n\n  /**\n   * Retorna um code reader, cria um se nenhume existe.\n   */\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\n\n    if (!this._codeReader) {\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints);\n    }\n\n    return this._codeReader;\n  }\n\n  /**\n   * Starts the continuous scanning for the given device.\n   *\n   * @param deviceId The deviceId from the device.\n   */\n  private scanFromDevice(deviceId: string): void {\n\n    const videoElement = this.previewElemRef.nativeElement;\n\n    const codeReader = this.getCodeReader();\n\n    const decodingStream = codeReader.continuousDecodeFromInputVideoDevice(deviceId, videoElement);\n\n    if (!decodingStream) {\n      throw new Error('Undefined decoding stream, aborting.');\n    }\n\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\n    const error = (err: any) => this._onDecodeError(err);\n    const complete = () => { this.reset(); console.log('completed'); };\n\n    decodingStream.subscribe(next, error, complete);\n  }\n\n  /**\n   * Handles decode errors.\n   */\n  private _onDecodeError(err: any) {\n    this.dispatchScanError(err);\n    this.reset();\n  }\n\n  /**\n   * Handles decode results.\n   */\n  private _onDecodeResult(result: Result, error: Exception): void {\n\n    if (result) {\n      this.dispatchScanSuccess(result);\n    } else {\n      this.dispatchScanFailure(error);\n    }\n\n    this.dispatchScanComplete(result);\n  }\n\n  /**\n   * Stops the code reader and returns the previous selected device.\n   */\n  private _reset(): MediaDeviceInfo {\n\n    if (!this._codeReader) {\n      return;\n    }\n\n    const device = this.device;\n    // do not set this.device inside this method, it would create a recursive loop\n    this._device = null;\n\n    this._codeReader.reset();\n\n    return device;\n  }\n\n  /**\n   * Resets the scanner and emits device change.\n   */\n  public reset(): void {\n    this._reset();\n    this.deviceChange.emit(null);\n  }\n\n  /**\n   * Sets the permission value and emmits the event.\n   */\n  private setPermission(hasPermission: boolean | null): void {\n    this.hasPermission = hasPermission;\n    this.permissionResponse.next(hasPermission);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ZXingScannerComponent } from './zxing-scanner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [ZXingScannerComponent],\n  exports: [ZXingScannerComponent],\n})\nexport class ZXingScannerModule { }\n","/*\n * Public API Surface of zxing-scanner\n */\n\nexport * from './lib/zxing-scanner.module';\nexport * from './lib/zxing-scanner.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["tslib_1.__decorate"],"mappings":"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"}