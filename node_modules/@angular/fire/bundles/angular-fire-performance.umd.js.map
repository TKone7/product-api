{"version":3,"file":"angular-fire-performance.umd.js","sources":["ng://@angular/fire/performance/performance.ts","ng://@angular/fire/performance/performance.module.ts"],"sourcesContent":["import { Injectable, NgZone, ApplicationRef, InjectionToken, Inject, Optional, PLATFORM_ID } from '@angular/core';\nimport { Observable, Subscription, of, empty } from 'rxjs';\nimport { first, tap, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { performance } from 'firebase/app';\nimport { FirebaseApp, ɵPromiseProxy, ɵlazySDKProxy } from '@angular/fire';\nimport { isPlatformBrowser } from '@angular/common';\n\n// SEMVER @ v6, drop and move core ng metrics to a service\nexport const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken<boolean>('angularfire2.performance.auto_trace');\nexport const INSTRUMENTATION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.instrumentationEnabled');\nexport const DATA_COLLECTION_ENABLED = new InjectionToken<boolean>('angularfire2.performance.dataCollectionEnabled');\n\nexport interface AngularFirePerformance extends Omit<ɵPromiseProxy<performance.Performance>, 'trace'> {};\n\nexport type TraceOptions = {\n  metrics?: {[key:string]: number},\n  attributes?: {[key:string]:string},\n  attribute$?: {[key:string]:Observable<string>},\n  incrementMetric$?: {[key:string]: Observable<number|void|null|undefined>},\n  metric$?: {[key:string]: Observable<number>}\n};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirePerformance {\n  \n  private readonly performance: Observable<performance.Performance>;\n\n  constructor(\n    app: FirebaseApp,\n    @Optional() @Inject(AUTOMATICALLY_TRACE_CORE_NG_METRICS) automaticallyTraceCoreNgMetrics:boolean|null,\n    @Optional() @Inject(INSTRUMENTATION_ENABLED) instrumentationEnabled:boolean|null,\n    @Optional() @Inject(DATA_COLLECTION_ENABLED) dataCollectionEnabled:boolean|null,\n    appRef: ApplicationRef,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) platformId:Object\n  ) {\n\n    this.performance = of(undefined).pipe(\n      switchMap(() => isPlatformBrowser(platformId) ? zone.runOutsideAngular(() => import('firebase/performance')) : empty()),\n      map(() => zone.runOutsideAngular(() => app.performance())),\n      tap(performance => {\n        if (instrumentationEnabled == false) { performance.instrumentationEnabled = false }\n        if (dataCollectionEnabled == false) { performance.dataCollectionEnabled = false }\n      }),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    if (automaticallyTraceCoreNgMetrics != false) {\n\n      // TODO determine more built in metrics\n      // this leaks... move to a service?\n      appRef.isStable.pipe(\n        first(it => it),\n        this.traceUntilComplete('isStable')\n      ).subscribe();\n\n    }\n\n    return ɵlazySDKProxy(this, this.performance, zone);\n\n  }\n\n  private readonly trace$ = (name:string, options?: TraceOptions) =>\n    this.performance.pipe(\n      switchMap(performance =>\n        new Observable<void>(emitter =>\n          this.zone.runOutsideAngular(() => {\n            const trace = performance.trace(name);\n            options && options.metrics && Object.keys(options.metrics).forEach(metric => {\n              trace.putMetric(metric, options!.metrics![metric])\n            });\n            options && options.attributes && Object.keys(options.attributes).forEach(attribute => {\n              trace.putAttribute(attribute, options!.attributes![attribute])\n            });\n            const attributeSubscriptions = options && options.attribute$ ? Object.keys(options.attribute$).map(attribute =>\n              options!.attribute$![attribute].subscribe(next => trace.putAttribute(attribute, next))\n            ) : [];\n            const metricSubscriptions = options && options.metric$ ? Object.keys(options.metric$).map(metric =>\n              options!.metric$![metric].subscribe(next => trace.putMetric(metric, next))\n            ) : [];\n            const incrementOnSubscriptions = options && options.incrementMetric$ ? Object.keys(options.incrementMetric$).map(metric =>\n              options!.incrementMetric$![metric].subscribe(next => trace.incrementMetric(metric, next || undefined))\n            ) : [];\n            emitter.next(trace.start());\n            return { unsubscribe: () => {\n              trace.stop();\n              metricSubscriptions.forEach(m => m.unsubscribe());\n              incrementOnSubscriptions.forEach(m => m.unsubscribe());\n              attributeSubscriptions.forEach(m => m.unsubscribe());\n            }};\n          })\n        )\n      )\n    );\n\n  public readonly traceUntil = <T=any>(name:string, test: (a:T) => boolean, options?: TraceOptions & { orComplete?: boolean }) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n    const traceSubscription = this.trace$(name, options).subscribe();\n    return source$.pipe(\n      tap(\n        a  => test(a) && traceSubscription.unsubscribe(),\n        () => {},\n        () => options && options.orComplete && traceSubscription.unsubscribe()\n      )\n    ).subscribe(subscriber);\n  });\n\n  public readonly traceWhile = <T=any>(name:string, test: (a:T) => boolean, options?: TraceOptions & { orComplete?: boolean}) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n    let traceSubscription: Subscription|undefined;\n    return source$.pipe(\n      tap(\n        a  => {\n          if (test(a)) {\n            traceSubscription = traceSubscription || this.trace$(name, options).subscribe();\n          } else {\n            traceSubscription && traceSubscription.unsubscribe();\n            traceSubscription = undefined;\n          }\n        },\n        () => {},\n        () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()\n      )\n    ).subscribe(subscriber);\n  });\n\n  public readonly traceUntilComplete = <T=any>(name:string, options?: TraceOptions) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n    const traceSubscription = this.trace$(name, options).subscribe();\n    return source$.pipe(\n      tap(\n        () => {},\n        () => {},\n        () => traceSubscription.unsubscribe()\n      )\n    ).subscribe(subscriber);\n  });\n\n  public readonly traceUntilFirst = <T=any>(name:string, options?: TraceOptions) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n    const traceSubscription = this.trace$(name, options).subscribe();\n    return source$.pipe(\n      tap(\n        () => traceSubscription.unsubscribe(),\n        () => {},\n        () => {}\n      )\n    ).subscribe(subscriber);\n  });\n\n  public readonly trace = <T=any>(name:string, options?: TraceOptions) => (source$: Observable<T>) => new Observable<T>(subscriber => {\n    const traceSubscription = this.trace$(name, options).subscribe();\n    return source$.pipe(\n      tap(\n        () => traceSubscription.unsubscribe(),\n        () => {},\n        () => traceSubscription.unsubscribe()\n      )\n    ).subscribe(subscriber);\n  });\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFirePerformance } from './performance';\n\n@NgModule({\n  providers: [ AngularFirePerformance ]\n})\nexport class AngularFirePerformanceModule {\n  constructor(_: AngularFirePerformance) {\n    // DI inject AFP here for the automatic data collection\n  } \n}\n"],"names":["InjectionToken","switchMap","Observable","tap","of","isPlatformBrowser","empty","map","shareReplay","first","ɵlazySDKProxy","Injectable","FirebaseApp","Optional","Inject","ApplicationRef","NgZone","PLATFORM_ID","NgModule"],"mappings":";;;;;;;;;;;;QAQa,mCAAmC,GAAG,IAAIA,mBAAc,CAAU,qCAAqC;;QACvG,uBAAuB,GAAG,IAAIA,mBAAc,CAAU,iDAAiD;;QACvG,uBAAuB,GAAG,IAAIA,mBAAc,CAAU,gDAAgD;;IAEX,CAAC;;QAiBvG,gCACE,GAAgB,EACyC,+BAA4C,EACxD,sBAAmC,EACnC,qBAAkC,EAC/E,MAAsB,EACd,IAAY,EACC,UAAiB;YAPxC,iBAiCC;YA3BS,SAAI,GAAJ,IAAI,CAAQ;YA6BL,WAAM;;;;;YAAG,UAAC,IAAW,EAAE,OAAsB;gBAC5D,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CACnBC,mBAAS;;;;gBAAC,UAAA,WAAW;oBACnB,OAAA,IAAIC,eAAU;;;;oBAAO,UAAA,OAAO;wBAC1B,OAAA,KAAI,CAAC,IAAI,CAAC,iBAAiB;;;wBAAC;;gCACpB,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;4BACrC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;;;;4BAAC,UAAA,MAAM;gCACvE,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,mBAAA,mBAAA,OAAO,GAAE,OAAO,GAAE,MAAM,CAAC,CAAC,CAAA;6BACnD,EAAC,CAAC;4BACH,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO;;;;4BAAC,UAAA,SAAS;gCAChF,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,mBAAA,mBAAA,OAAO,GAAE,UAAU,GAAE,SAAS,CAAC,CAAC,CAAA;6BAC/D,EAAC,CAAC;;gCACG,sBAAsB,GAAG,OAAO,IAAI,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG;;;;4BAAC,UAAA,SAAS;gCAC1G,OAAA,mBAAA,mBAAA,OAAO,GAAE,UAAU,GAAE,SAAS,CAAC,CAAC,SAAS;;;;gCAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,GAAA,EAAC;6BAAA,EACvF,GAAG,EAAE;;gCACA,mBAAmB,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG;;;;4BAAC,UAAA,MAAM;gCAC9F,OAAA,mBAAA,mBAAA,OAAO,GAAE,OAAO,GAAE,MAAM,CAAC,CAAC,SAAS;;;;gCAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,GAAA,EAAC;6BAAA,EAC3E,GAAG,EAAE;;gCACA,wBAAwB,GAAG,OAAO,IAAI,OAAO,CAAC,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,GAAG;;;;4BAAC,UAAA,MAAM;gCACrH,OAAA,mBAAA,mBAAA,OAAO,GAAE,gBAAgB,GAAE,MAAM,CAAC,CAAC,SAAS;;;;gCAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,IAAI,SAAS,CAAC,GAAA,EAAC;6BAAA,EACvG,GAAG,EAAE;4BACN,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;4BAC5B,OAAO,EAAE,WAAW;;;gCAAE;oCACpB,KAAK,CAAC,IAAI,EAAE,CAAC;oCACb,mBAAmB,CAAC,OAAO;;;;oCAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,EAAC,CAAC;oCAClD,wBAAwB,CAAC,OAAO;;;;oCAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,EAAC,CAAC;oCACvD,sBAAsB,CAAC,OAAO;;;;oCAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,GAAA,EAAC,CAAC;iCACtD,CAAA,EAAC,CAAC;yBACJ,EAAC;qBAAA,EACH;iBAAA,EACF,CACF;aAAA,EAAC;YAEY,eAAU;;;;;;;YAAG,UAAQ,IAAW,EAAE,IAAsB,EAAE,OAAiD;;;;YAAK,UAAC,OAAsB,IAAK,OAAA,IAAIA,eAAU;;;;YAAI,UAAA,UAAU;;oBAChL,iBAAiB,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;gBAChE,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;;gBACD,UAAA,CAAC,IAAK,OAAA,IAAI,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,WAAW,EAAE,GAAA;;;gBAChD,eAAQ;;;gBACR,cAAM,OAAA,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,iBAAiB,CAAC,WAAW,EAAE,GAAA,EACvE,CACF,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACzB,EAAC,GAAA,IAAA,EAAC;YAEa,eAAU;;;;;;;YAAG,UAAQ,IAAW,EAAE,IAAsB,EAAE,OAAgD;;;;YAAK,UAAC,OAAsB,IAAK,OAAA,IAAID,eAAU;;;;YAAI,UAAA,UAAU;;oBACjL,iBAAyC;gBAC7C,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;;gBACD,UAAA,CAAC;oBACC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;wBACX,iBAAiB,GAAG,iBAAiB,IAAI,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;qBACjF;yBAAM;wBACL,iBAAiB,IAAI,iBAAiB,CAAC,WAAW,EAAE,CAAC;wBACrD,iBAAiB,GAAG,SAAS,CAAC;qBAC/B;iBACF;;;gBACD,eAAQ;;;gBACR,cAAM,OAAA,OAAO,IAAI,OAAO,CAAC,UAAU,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,WAAW,EAAE,GAAA,EAC5F,CACF,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACzB,EAAC,GAAA,IAAA,EAAC;YAEa,uBAAkB;;;;;;YAAG,UAAQ,IAAW,EAAE,OAAsB;;;;YAAK,UAAC,OAAsB,IAAK,OAAA,IAAID,eAAU;;;;YAAI,UAAA,UAAU;;oBACrI,iBAAiB,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;gBAChE,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;gBACD,eAAQ;;;gBACR,eAAQ;;;gBACR,cAAM,OAAA,iBAAiB,CAAC,WAAW,EAAE,GAAA,EACtC,CACF,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACzB,EAAC,GAAA,IAAA,EAAC;YAEa,oBAAe;;;;;;YAAG,UAAQ,IAAW,EAAE,OAAsB;;;;YAAK,UAAC,OAAsB,IAAK,OAAA,IAAID,eAAU;;;;YAAI,UAAA,UAAU;;oBAClI,iBAAiB,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;gBAChE,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;gBACD,cAAM,OAAA,iBAAiB,CAAC,WAAW,EAAE,GAAA;;;gBACrC,eAAQ;;;gBACR,eAAQ,EACT,CACF,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACzB,EAAC,GAAA,IAAA,EAAC;YAEa,UAAK;;;;;;YAAG,UAAQ,IAAW,EAAE,OAAsB;;;;YAAK,UAAC,OAAsB,IAAK,OAAA,IAAID,eAAU;;;;YAAI,UAAA,UAAU;;oBACxH,iBAAiB,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;gBAChE,OAAO,OAAO,CAAC,IAAI,CACjBC,aAAG;;;gBACD,cAAM,OAAA,iBAAiB,CAAC,WAAW,EAAE,GAAA;;;gBACrC,eAAQ;;;gBACR,cAAM,OAAA,iBAAiB,CAAC,WAAW,EAAE,GAAA,EACtC,CACF,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;aACzB,EAAC,GAAA,IAAA,EAAC;YAtHD,IAAI,CAAC,WAAW,GAAGC,OAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CACnCH,mBAAS;;;YAAC,cAAM,OAAAI,wBAAiB,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,iBAAiB;;;YAAC,cAAM,OAAA,OAAO,sBAAsB,CAAC,GAAA,EAAC,GAAGC,UAAK,EAAE,GAAA,EAAC,EACvHC,aAAG;;;YAAC,cAAM,OAAA,IAAI,CAAC,iBAAiB;;;YAAC,cAAM,OAAA,GAAG,CAAC,WAAW,EAAE,GAAA,EAAC,GAAA,EAAC,EAC1DJ,aAAG;;;;YAAC,UAAA,WAAW;gBACb,IAAI,sBAAsB,IAAI,KAAK,EAAE;oBAAE,WAAW,CAAC,sBAAsB,GAAG,KAAK,CAAA;iBAAE;gBACnF,IAAI,qBAAqB,IAAI,KAAK,EAAE;oBAAE,WAAW,CAAC,qBAAqB,GAAG,KAAK,CAAA;iBAAE;aAClF,EAAC,EACFK,qBAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAChD,CAAC;YAEF,IAAI,+BAA+B,IAAI,KAAK,EAAE;;;gBAI5C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAClBC,eAAK;;;;gBAAC,UAAA,EAAE,IAAI,OAAA,EAAE,GAAA,EAAC,EACf,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CACpC,CAAC,SAAS,EAAE,CAAC;aAEf;YAED,OAAOC,qBAAa,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAEpD;;oBAxCFC,eAAU,SAAC;wBACV,UAAU,EAAE,KAAK;qBAClB;;;;oBApBQC,gBAAW;oDA2BfC,aAAQ,YAAIC,WAAM,SAAC,mCAAmC;oDACtDD,aAAQ,YAAIC,WAAM,SAAC,uBAAuB;oDAC1CD,aAAQ,YAAIC,WAAM,SAAC,uBAAuB;oBAjClBC,mBAAc;oBAAtBC,WAAM;oBAoCS,MAAM,uBAArCF,WAAM,SAACG,gBAAW;;;qCApCvB;KAsBA,IAyIC;;;;;;QApIC,6CAAkE;;;;;QAqClE,wCA+BI;;QAEJ,4CASG;;QAEH,4CAgBG;;QAEH,oDASG;;QAEH,iDASG;;QAEH,uCASG;;;;;QA1HD,sCAAoB;;;;;;;;QC5BtB,sCAAY,CAAyB;;SAEpC;;oBANFC,aAAQ,SAAC;wBACR,SAAS,EAAE,CAAE,sBAAsB,CAAE;qBACtC;;;;oBAJQ,sBAAsB;;QAS/B,mCAAC;KAPD;;;;;;;;;;;;;;;;"}