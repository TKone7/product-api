/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, ApplicationRef, InjectionToken, Inject, Optional, PLATFORM_ID } from '@angular/core';
import { Observable, of, empty } from 'rxjs';
import { first, tap, map, shareReplay, switchMap } from 'rxjs/operators';
import { FirebaseApp, ÉµlazySDKProxy } from '@angular/fire';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
// SEMVER @ v6, drop and move core ng metrics to a service
/** @type {?} */
export const AUTOMATICALLY_TRACE_CORE_NG_METRICS = new InjectionToken('angularfire2.performance.auto_trace');
/** @type {?} */
export const INSTRUMENTATION_ENABLED = new InjectionToken('angularfire2.performance.instrumentationEnabled');
/** @type {?} */
export const DATA_COLLECTION_ENABLED = new InjectionToken('angularfire2.performance.dataCollectionEnabled');
// WARNING: interface has both a type and a value, skipping emit
;
export class AngularFirePerformance {
    /**
     * @param {?} app
     * @param {?} automaticallyTraceCoreNgMetrics
     * @param {?} instrumentationEnabled
     * @param {?} dataCollectionEnabled
     * @param {?} appRef
     * @param {?} zone
     * @param {?} platformId
     */
    constructor(app, automaticallyTraceCoreNgMetrics, instrumentationEnabled, dataCollectionEnabled, appRef, zone, platformId) {
        this.zone = zone;
        this.trace$ = (/**
         * @param {?} name
         * @param {?=} options
         * @return {?}
         */
        (name, options) => this.performance.pipe(switchMap((/**
         * @param {?} performance
         * @return {?}
         */
        performance => new Observable((/**
         * @param {?} emitter
         * @return {?}
         */
        emitter => this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const trace = performance.trace(name);
            options && options.metrics && Object.keys(options.metrics).forEach((/**
             * @param {?} metric
             * @return {?}
             */
            metric => {
                trace.putMetric(metric, (/** @type {?} */ ((/** @type {?} */ (options)).metrics))[metric]);
            }));
            options && options.attributes && Object.keys(options.attributes).forEach((/**
             * @param {?} attribute
             * @return {?}
             */
            attribute => {
                trace.putAttribute(attribute, (/** @type {?} */ ((/** @type {?} */ (options)).attributes))[attribute]);
            }));
            /** @type {?} */
            const attributeSubscriptions = options && options.attribute$ ? Object.keys(options.attribute$).map((/**
             * @param {?} attribute
             * @return {?}
             */
            attribute => (/** @type {?} */ ((/** @type {?} */ (options)).attribute$))[attribute].subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => trace.putAttribute(attribute, next))))) : [];
            /** @type {?} */
            const metricSubscriptions = options && options.metric$ ? Object.keys(options.metric$).map((/**
             * @param {?} metric
             * @return {?}
             */
            metric => (/** @type {?} */ ((/** @type {?} */ (options)).metric$))[metric].subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => trace.putMetric(metric, next))))) : [];
            /** @type {?} */
            const incrementOnSubscriptions = options && options.incrementMetric$ ? Object.keys(options.incrementMetric$).map((/**
             * @param {?} metric
             * @return {?}
             */
            metric => (/** @type {?} */ ((/** @type {?} */ (options)).incrementMetric$))[metric].subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => trace.incrementMetric(metric, next || undefined))))) : [];
            emitter.next(trace.start());
            return { unsubscribe: (/**
                 * @return {?}
                 */
                () => {
                    trace.stop();
                    metricSubscriptions.forEach((/**
                     * @param {?} m
                     * @return {?}
                     */
                    m => m.unsubscribe()));
                    incrementOnSubscriptions.forEach((/**
                     * @param {?} m
                     * @return {?}
                     */
                    m => m.unsubscribe()));
                    attributeSubscriptions.forEach((/**
                     * @param {?} m
                     * @return {?}
                     */
                    m => m.unsubscribe()));
                }) };
        }))))))));
        this.traceUntil = (/**
         * @template T
         * @param {?} name
         * @param {?} test
         * @param {?=} options
         * @return {?}
         */
        (name, test, options) => (/**
         * @param {?} source$
         * @return {?}
         */
        (source$) => new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            /** @type {?} */
            const traceSubscription = this.trace$(name, options).subscribe();
            return source$.pipe(tap((/**
             * @param {?} a
             * @return {?}
             */
            a => test(a) && traceSubscription.unsubscribe()), (/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => options && options.orComplete && traceSubscription.unsubscribe()))).subscribe(subscriber);
        }))));
        this.traceWhile = (/**
         * @template T
         * @param {?} name
         * @param {?} test
         * @param {?=} options
         * @return {?}
         */
        (name, test, options) => (/**
         * @param {?} source$
         * @return {?}
         */
        (source$) => new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            /** @type {?} */
            let traceSubscription;
            return source$.pipe(tap((/**
             * @param {?} a
             * @return {?}
             */
            a => {
                if (test(a)) {
                    traceSubscription = traceSubscription || this.trace$(name, options).subscribe();
                }
                else {
                    traceSubscription && traceSubscription.unsubscribe();
                    traceSubscription = undefined;
                }
            }), (/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => options && options.orComplete && traceSubscription && traceSubscription.unsubscribe()))).subscribe(subscriber);
        }))));
        this.traceUntilComplete = (/**
         * @template T
         * @param {?} name
         * @param {?=} options
         * @return {?}
         */
        (name, options) => (/**
         * @param {?} source$
         * @return {?}
         */
        (source$) => new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            /** @type {?} */
            const traceSubscription = this.trace$(name, options).subscribe();
            return source$.pipe(tap((/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => traceSubscription.unsubscribe()))).subscribe(subscriber);
        }))));
        this.traceUntilFirst = (/**
         * @template T
         * @param {?} name
         * @param {?=} options
         * @return {?}
         */
        (name, options) => (/**
         * @param {?} source$
         * @return {?}
         */
        (source$) => new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            /** @type {?} */
            const traceSubscription = this.trace$(name, options).subscribe();
            return source$.pipe(tap((/**
             * @return {?}
             */
            () => traceSubscription.unsubscribe()), (/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => { }))).subscribe(subscriber);
        }))));
        this.trace = (/**
         * @template T
         * @param {?} name
         * @param {?=} options
         * @return {?}
         */
        (name, options) => (/**
         * @param {?} source$
         * @return {?}
         */
        (source$) => new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            /** @type {?} */
            const traceSubscription = this.trace$(name, options).subscribe();
            return source$.pipe(tap((/**
             * @return {?}
             */
            () => traceSubscription.unsubscribe()), (/**
             * @return {?}
             */
            () => { }), (/**
             * @return {?}
             */
            () => traceSubscription.unsubscribe()))).subscribe(subscriber);
        }))));
        this.performance = of(undefined).pipe(switchMap((/**
         * @return {?}
         */
        () => isPlatformBrowser(platformId) ? zone.runOutsideAngular((/**
         * @return {?}
         */
        () => import('firebase/performance'))) : empty())), map((/**
         * @return {?}
         */
        () => zone.runOutsideAngular((/**
         * @return {?}
         */
        () => app.performance())))), tap((/**
         * @param {?} performance
         * @return {?}
         */
        performance => {
            if (instrumentationEnabled == false) {
                performance.instrumentationEnabled = false;
            }
            if (dataCollectionEnabled == false) {
                performance.dataCollectionEnabled = false;
            }
        })), shareReplay({ bufferSize: 1, refCount: false }));
        if (automaticallyTraceCoreNgMetrics != false) {
            // TODO determine more built in metrics
            // this leaks... move to a service?
            appRef.isStable.pipe(first((/**
             * @param {?} it
             * @return {?}
             */
            it => it)), this.traceUntilComplete('isStable')).subscribe();
        }
        return ÉµlazySDKProxy(this, this.performance, zone);
    }
}
AngularFirePerformance.decorators = [
    { type: Injectable, args: [{
                providedIn: 'any'
            },] }
];
/** @nocollapse */
AngularFirePerformance.ctorParameters = () => [
    { type: FirebaseApp },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [AUTOMATICALLY_TRACE_CORE_NG_METRICS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INSTRUMENTATION_ENABLED,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DATA_COLLECTION_ENABLED,] }] },
    { type: ApplicationRef },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ AngularFirePerformance.Éµprov = i0.ÉµÉµdefineInjectable({ factory: function AngularFirePerformance_Factory() { return new AngularFirePerformance(i0.ÉµÉµinject(i1.FirebaseApp), i0.ÉµÉµinject(AUTOMATICALLY_TRACE_CORE_NG_METRICS, 8), i0.ÉµÉµinject(INSTRUMENTATION_ENABLED, 8), i0.ÉµÉµinject(DATA_COLLECTION_ENABLED, 8), i0.ÉµÉµinject(i0.ApplicationRef), i0.ÉµÉµinject(i0.NgZone), i0.ÉµÉµinject(i0.PLATFORM_ID)); }, token: AngularFirePerformance, providedIn: "any" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.performance;
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.trace$;
    /** @type {?} */
    AngularFirePerformance.prototype.traceUntil;
    /** @type {?} */
    AngularFirePerformance.prototype.traceWhile;
    /** @type {?} */
    AngularFirePerformance.prototype.traceUntilComplete;
    /** @type {?} */
    AngularFirePerformance.prototype.traceUntilFirst;
    /** @type {?} */
    AngularFirePerformance.prototype.trace;
    /**
     * @type {?}
     * @private
     */
    AngularFirePerformance.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,