/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createUploadTask } from './task';
import { from } from 'rxjs';
/**
 * @record
 */
export function AngularFireStorageReference() { }
if (false) {
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.getDownloadURL = function () { };
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.getMetadata = function () { };
    /**
     * @return {?}
     */
    AngularFireStorageReference.prototype.delete = function () { };
    /**
     * @param {?} path
     * @return {?}
     */
    AngularFireStorageReference.prototype.child = function (path) { };
    /**
     * @param {?} meta
     * @return {?}
     */
    AngularFireStorageReference.prototype.updateMetatdata = function (meta) { };
    /**
     * @param {?} meta
     * @return {?}
     */
    AngularFireStorageReference.prototype.updateMetadata = function (meta) { };
    /**
     * @param {?} data
     * @param {?=} metadata
     * @return {?}
     */
    AngularFireStorageReference.prototype.put = function (data, metadata) { };
    /**
     * @param {?} data
     * @param {?=} format
     * @param {?=} metadata
     * @return {?}
     */
    AngularFireStorageReference.prototype.putString = function (data, format, metadata) { };
}
/**
 * Create an AngularFire wrapped Storage Reference. This object
 * creates observable methods from promise based methods.
 * @param {?} ref
 * @param {?} schedulers
 * @param {?} keepUnstableUntilFirst
 * @return {?}
 */
export function createStorageRef(ref, schedulers, keepUnstableUntilFirst) {
    return {
        getDownloadURL: (/**
         * @return {?}
         */
        () => from(ref.getDownloadURL(), schedulers.outsideAngular).pipe(keepUnstableUntilFirst)),
        getMetadata: (/**
         * @return {?}
         */
        () => from(ref.getMetadata()).pipe(keepUnstableUntilFirst)),
        delete: (/**
         * @return {?}
         */
        () => from(ref.delete())),
        child: (/**
         * @param {?} path
         * @return {?}
         */
        (path) => createStorageRef(ref.child(path), schedulers, keepUnstableUntilFirst)),
        updateMetatdata: (/**
         * @param {?} meta
         * @return {?}
         */
        (meta) => from(ref.updateMetadata(meta))),
        updateMetadata: (/**
         * @param {?} meta
         * @return {?}
         */
        (meta) => from(ref.updateMetadata(meta))),
        put: (/**
         * @param {?} data
         * @param {?=} metadata
         * @return {?}
         */
        (data, metadata) => {
            /** @type {?} */
            const task = ref.put(data, metadata);
            return createUploadTask(task);
        }),
        putString: (/**
         * @param {?} data
         * @param {?=} format
         * @param {?=} metadata
         * @return {?}
         */
        (data, format, metadata) => {
            /** @type {?} */
            const task = ref.putString(data, format, metadata);
            return createUploadTask(task);
        })
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXIvZmlyZS9zdG9yYWdlLyIsInNvdXJjZXMiOlsicmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQXlCLE1BQU0sUUFBUSxDQUFDO0FBQ2pFLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFHeEMsaURBU0M7Ozs7O0lBUkMsdUVBQWtDOzs7O0lBQ2xDLG9FQUErQjs7OztJQUMvQiwrREFBMEI7Ozs7O0lBQzFCLGtFQUF5Qjs7Ozs7SUFDekIsNEVBQXlEOzs7OztJQUN6RCwyRUFBd0Q7Ozs7OztJQUN4RCwwRUFBNkU7Ozs7Ozs7SUFDN0Usd0ZBQW1IOzs7Ozs7Ozs7O0FBUXJILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsR0FBYyxFQUNkLFVBQWtDLEVBQ2xDLHNCQUFpRTtJQUVqRSxPQUFPO1FBQ0wsY0FBYzs7O1FBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUM5RSxzQkFBc0IsQ0FDdkIsQ0FBQTtRQUNELFdBQVc7OztRQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzdDLHNCQUFzQixDQUN2QixDQUFBO1FBQ0QsTUFBTTs7O1FBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBQ2hDLEtBQUs7Ozs7UUFBRSxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsc0JBQXNCLENBQUMsQ0FBQTtRQUM5RixlQUFlOzs7O1FBQUUsQ0FBQyxJQUFzQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzNFLGNBQWM7Ozs7UUFBRSxDQUFDLElBQXNCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDMUUsR0FBRzs7Ozs7UUFBRSxDQUFDLElBQVMsRUFBRSxRQUF5QixFQUFFLEVBQUU7O2tCQUN0QyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1lBQ3BDLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFBO1FBQ0QsU0FBUzs7Ozs7O1FBQUUsQ0FBQyxJQUFZLEVBQUUsTUFBcUIsRUFBRSxRQUF5QixFQUFFLEVBQUU7O2tCQUN0RSxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQztZQUNsRCxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQTtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2V0dGFibGVNZXRhZGF0YSwgVXBsb2FkTWV0YWRhdGEsIFJlZmVyZW5jZSwgU3RyaW5nRm9ybWF0IH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGNyZWF0ZVVwbG9hZFRhc2ssIEFuZ3VsYXJGaXJlVXBsb2FkVGFzayB9IGZyb20gJy4vdGFzayc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJGaXJlU3RvcmFnZVJlZmVyZW5jZSB7XG4gIGdldERvd25sb2FkVVJMKCk6IE9ic2VydmFibGU8YW55PjtcbiAgZ2V0TWV0YWRhdGEoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICBkZWxldGUoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICBjaGlsZChwYXRoOiBzdHJpbmcpOiBhbnk7XG4gIHVwZGF0ZU1ldGF0ZGF0YShtZXRhOiBTZXR0YWJsZU1ldGFkYXRhKTogT2JzZXJ2YWJsZTxhbnk+O1xuICB1cGRhdGVNZXRhZGF0YShtZXRhOiBTZXR0YWJsZU1ldGFkYXRhKTogT2JzZXJ2YWJsZTxhbnk+O1xuICBwdXQoZGF0YTogYW55LCBtZXRhZGF0YT86IFVwbG9hZE1ldGFkYXRhIHwgdW5kZWZpbmVkKTogQW5ndWxhckZpcmVVcGxvYWRUYXNrO1xuICBwdXRTdHJpbmcoZGF0YTogc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcgfCB1bmRlZmluZWQsIG1ldGFkYXRhPzogVXBsb2FkTWV0YWRhdGEgfCB1bmRlZmluZWQpOiBBbmd1bGFyRmlyZVVwbG9hZFRhc2s7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIEFuZ3VsYXJGaXJlIHdyYXBwZWQgU3RvcmFnZSBSZWZlcmVuY2UuIFRoaXMgb2JqZWN0XG4gKiBjcmVhdGVzIG9ic2VydmFibGUgbWV0aG9kcyBmcm9tIHByb21pc2UgYmFzZWQgbWV0aG9kcy5cbiAqIEBwYXJhbSByZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JhZ2VSZWYoXG4gIHJlZjogUmVmZXJlbmNlLFxuICBzY2hlZHVsZXJzOiDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyxcbiAga2VlcFVuc3RhYmxlVW50aWxGaXJzdDogPFQ+KG9icyQ6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8VD5cbik6IEFuZ3VsYXJGaXJlU3RvcmFnZVJlZmVyZW5jZSB7XG4gIHJldHVybiB7XG4gICAgZ2V0RG93bmxvYWRVUkw6ICgpID0+IGZyb20ocmVmLmdldERvd25sb2FkVVJMKCksIHNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXIpLnBpcGUoXG4gICAgICBrZWVwVW5zdGFibGVVbnRpbEZpcnN0XG4gICAgKSxcbiAgICBnZXRNZXRhZGF0YTogKCkgPT4gZnJvbShyZWYuZ2V0TWV0YWRhdGEoKSkucGlwZShcbiAgICAgIGtlZXBVbnN0YWJsZVVudGlsRmlyc3RcbiAgICApLFxuICAgIGRlbGV0ZTogKCkgPT4gZnJvbShyZWYuZGVsZXRlKCkpLFxuICAgIGNoaWxkOiAocGF0aDogc3RyaW5nKSA9PiBjcmVhdGVTdG9yYWdlUmVmKHJlZi5jaGlsZChwYXRoKSwgc2NoZWR1bGVycywga2VlcFVuc3RhYmxlVW50aWxGaXJzdCksXG4gICAgdXBkYXRlTWV0YXRkYXRhOiAobWV0YTogU2V0dGFibGVNZXRhZGF0YSkgPT4gZnJvbShyZWYudXBkYXRlTWV0YWRhdGEobWV0YSkpLFxuICAgIHVwZGF0ZU1ldGFkYXRhOiAobWV0YTogU2V0dGFibGVNZXRhZGF0YSkgPT4gZnJvbShyZWYudXBkYXRlTWV0YWRhdGEobWV0YSkpLFxuICAgIHB1dDogKGRhdGE6IGFueSwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IHJlZi5wdXQoZGF0YSwgbWV0YWRhdGEpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVVwbG9hZFRhc2sodGFzayk7XG4gICAgfSxcbiAgICBwdXRTdHJpbmc6IChkYXRhOiBzdHJpbmcsIGZvcm1hdD86IFN0cmluZ0Zvcm1hdCwgbWV0YWRhdGE/OiBVcGxvYWRNZXRhZGF0YSkgPT4ge1xuICAgICAgY29uc3QgdGFzayA9IHJlZi5wdXRTdHJpbmcoZGF0YSwgZm9ybWF0LCBtZXRhZGF0YSk7XG4gICAgICByZXR1cm4gY3JlYXRlVXBsb2FkVGFzayh0YXNrKTtcbiAgICB9XG4gIH07XG59XG4iXX0=