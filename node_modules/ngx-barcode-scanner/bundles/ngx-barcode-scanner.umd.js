(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('quagga'), require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-barcode-scanner', ['exports', 'quagga', '@angular/common', '@angular/core'], factory) :
    (factory((global['ngx-barcode-scanner'] = {}),global.Quagga,global.ng.common,global.ng.core));
}(this, (function (exports,Quagga,common,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BARCODE_TYPES = [
        'code_128',
        'code_39',
        'code_39_vin',
        'ean',
        'ean_extended',
        'ean_8',
        'upc',
        'upc_e',
        'codabar',
        'i2of5',
        '2of5',
        'code_93'
    ];
    /**
     * @param {?} value
     * @return {?}
     */
    function mapToReader(value) {
        if (typeof value === 'string') {
            checkBarCodeType(value);
            return [mapToBarcodeType(value)];
        }
        else {
            return value.map(function (val) {
                checkBarCodeType(val);
                return mapToBarcodeType(val);
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function checkBarCodeType(value) {
        if (!BARCODE_TYPES.some(function (t) { return t === value; })) {
            throw new Error("This barcode type '" + value + "' is not valid.");
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function mapToBarcodeType(value) {
        return value + "_reader";
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_CONFIG = /** @type {?} */ ({
        inputStream: {
            name: 'Live',
            type: 'LiveStream',
            target: null,
            constraints: {
                width: { min: 640 },
                height: { min: 480 },
                aspectRatio: { min: 1, max: 100 },
                facingMode: 'environment',
            },
            singleChannel: false // true: only the red color-channel is read
        },
        locator: {
            patchSize: 'medium',
            halfSample: true
        },
        locate: true,
        numOfWorkers: 4,
        decoder: {
            readers: ['code_128_reader']
        }
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamComponent = /** @class */ (function () {
        function BarecodeScannerLivestreamComponent() {
            // Outputs
            this.valueChanges = new core.EventEmitter();
            this.started = new core.EventEmitter();
            this._started = false;
            this.configQuagga = DEFAULT_CONFIG;
        }
        Object.defineProperty(BarecodeScannerLivestreamComponent.prototype, "isStarted", {
            get: /**
             * @return {?}
             */ function () {
                return this._started;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.stop();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.restart();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype._init = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    Quagga.onProcessed(function (result) { return _this.onProcessed(result); });
                    Quagga.onDetected(function (result) { return _this.onDetected(result); });
                    _this.configQuagga.inputStream.target = _this.barecodeScanner.nativeElement;
                    if (_this.type) {
                        _this.configQuagga.decoder.readers = mapToReader(_this.type);
                    }
                    if (_this.deviceId) {
                        _this.configQuagga.inputStream.constraints.deviceId = _this.deviceId;
                    }
                    Quagga.init(_this.configQuagga, function (err) {
                        if (err) {
                            console.log(err);
                            return reject(err);
                        }
                        resolve();
                    });
                });
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.start = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!this._started)
                                    return [3 /*break*/, 2];
                                return [4 /*yield*/, this._init()];
                            case 1:
                                _a.sent();
                                Quagga.start();
                                this._started = true;
                                this.started.next(true);
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.stop = /**
         * @return {?}
         */
            function () {
                if (this._started) {
                    Quagga.stop();
                    this._started = false;
                    this.started.next(false);
                }
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.restart = /**
         * @return {?}
         */
            function () {
                if (this._started) {
                    this.stop();
                    this.start();
                }
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.onProcessed = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                /** @type {?} */
                var drawingCtx = Quagga.canvas.ctx.overlay;
                /** @type {?} */
                var drawingCanvas = Quagga.canvas.dom.overlay;
                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width'), 10), parseInt(drawingCanvas.getAttribute('height'), 10));
                        result.boxes.filter(function (box) {
                            return box !== result.box;
                        }).forEach(function (box) {
                            Quagga.ImageDebug.drawPath(box, {
                                x: 0,
                                y: 1,
                            }, drawingCtx, {
                                color: 'green',
                                lineWidth: 2,
                            });
                        });
                    }
                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box, {
                            x: 0,
                            y: 1,
                        }, drawingCtx, {
                            color: '#00F',
                            lineWidth: 2,
                        });
                    }
                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line, {
                            x: 'x',
                            y: 'y',
                        }, drawingCtx, {
                            color: 'red',
                            lineWidth: 3,
                        });
                    }
                }
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamComponent.prototype.onDetected = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.valueChanges.next(result);
            };
        BarecodeScannerLivestreamComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'barcode-scanner-livestream',
                        template: "<div #BarecodeScanner class=\"scanner\" [hidden]=\"!isStarted\">\n</div>",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".scanner{position:relative}.scanner canvas,.scanner video{max-width:100%;width:100%}.scanner canvas.drawingBuffer{position:absolute;left:0;top:0}"]
                    }] }
        ];
        BarecodeScannerLivestreamComponent.propDecorators = {
            type: [{ type: core.Input }],
            deviceId: [{ type: core.Input }],
            valueChanges: [{ type: core.Output }],
            started: [{ type: core.Output }],
            barecodeScanner: [{ type: core.ViewChild, args: ['BarecodeScanner',] }]
        };
        return BarecodeScannerLivestreamComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamModule = /** @class */ (function () {
        function BarecodeScannerLivestreamModule() {
        }
        BarecodeScannerLivestreamModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            BarecodeScannerLivestreamComponent
                        ],
                        exports: [
                            BarecodeScannerLivestreamComponent
                        ]
                    },] }
        ];
        return BarecodeScannerLivestreamModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamOverlayComponent = /** @class */ (function () {
        function BarecodeScannerLivestreamOverlayComponent() {
            this._started = false;
            this.valueChanges = new core.EventEmitter();
            this.started = new core.EventEmitter();
            this._showScanner = false;
        }
        Object.defineProperty(BarecodeScannerLivestreamOverlayComponent.prototype, "isStarted", {
            get: /**
             * @return {?}
             */ function () {
                return this._started;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BarecodeScannerLivestreamOverlayComponent.prototype, "showScanner", {
            get: /**
             * @return {?}
             */ function () {
                return this._showScanner;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.scanner.stop();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                this._showScanner = true;
                this.scanner.start();
            };
        /**
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.hide = /**
         * @return {?}
         */
            function () {
                this._showScanner = false;
                this.scanner.stop();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.onStarted = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this._started = value;
                this.started.next(value);
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BarecodeScannerLivestreamOverlayComponent.prototype.onValueChanges = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.valueChanges.next(result);
            };
        BarecodeScannerLivestreamOverlayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'barcode-scanner-livestream-overlay',
                        template: "<div class=\"barcode-scanner-livestream-overlay\" [hidden]=\"!showScanner\">\n    <div class=\"barcode-scanner-livestream-overlay-content\">\n        <div class=\"barcode-scanner-livestream-overlay-close\" *ngIf=\"isStarted\" (click)=\"hide()\">X</div>\n        <barcode-scanner-livestream [type]=\"type\" [deviceId]=\"deviceId\" (valueChanges)=\"onValueChanges($event)\" (started)=\"onStarted($event)\"></barcode-scanner-livestream>\n    </div>\n</div>",
                        styles: [".barcode-scanner-livestream-overlay{overflow:hidden;position:fixed;top:0;bottom:0;left:0;right:0;width:100%;background-color:rgba(0,0,0,.3);z-index:1000}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content{top:50%;position:absolute;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:90%;max-height:90%;max-width:800px}.barcode-scanner-livestream-overlay .barcode-scanner-livestream-overlay-content .barcode-scanner-livestream-overlay-close{position:absolute;right:0;padding:.5rem;width:2rem;height:2rem;line-height:2rem;text-align:center;background-color:#fff;cursor:pointer;border:3px solid #000;font-size:1.5rem;margin:-1rem;border-radius:2rem;z-index:100;box-sizing:content-box}"]
                    }] }
        ];
        BarecodeScannerLivestreamOverlayComponent.propDecorators = {
            type: [{ type: core.Input }],
            deviceId: [{ type: core.Input }],
            valueChanges: [{ type: core.Output }],
            started: [{ type: core.Output }],
            scanner: [{ type: core.ViewChild, args: [BarecodeScannerLivestreamComponent,] }]
        };
        return BarecodeScannerLivestreamOverlayComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BarecodeScannerLivestreamOverlayModule = /** @class */ (function () {
        function BarecodeScannerLivestreamOverlayModule() {
        }
        BarecodeScannerLivestreamOverlayModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            BarecodeScannerLivestreamModule
                        ],
                        declarations: [
                            BarecodeScannerLivestreamOverlayComponent
                        ],
                        exports: [
                            BarecodeScannerLivestreamOverlayComponent
                        ]
                    },] }
        ];
        return BarecodeScannerLivestreamOverlayModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BarecodeScannerLivestreamModule = BarecodeScannerLivestreamModule;
    exports.BarecodeScannerLivestreamComponent = BarecodeScannerLivestreamComponent;
    exports.BarecodeScannerLivestreamOverlayModule = BarecodeScannerLivestreamOverlayModule;
    exports.BarecodeScannerLivestreamOverlayComponent = BarecodeScannerLivestreamOverlayComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-barcode-scanner.umd.js.map