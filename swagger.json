{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Fridgy",
    "description" : "This is the API endpoint documentation from the Fridgy web app.",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "hello@tobiaskoller.tk"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "servers" : [ {
    "url" : "https://fridgy-api.herokuapp.com/api"
  }, {
    "url" : "http://fridgy-api.herokuapp.com/api"
  } ],
  "tags" : [ {
    "name" : "products",
    "description" : "Represents a product."
  }, {
    "name" : "fridges",
    "description" : "Represents a fridge."
  }, {
    "name" : "items",
    "description" : "Represents an instance of a product in a fridge."
  }, {
    "name" : "owners",
    "description" : "A user that is authorized to manage a fridge and its content."
  }, {
    "name" : "users",
    "description" : "Used for registration."
  } ],
  "paths" : {
    "/products/{barcode}" : {
      "parameters" : [ {
        "name" : "barcode",
        "in" : "path",
        "description" : "Barcode used as unique identifier to find product",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Find product by barcode",
        "description" : "Searches the produts by the unique identifier of barcode.",
        "operationId" : "get_product_by_barcode",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "404" : {
            "description" : "Product not found"
          }
        }
      },
      "put" : {
        "tags" : [ "products" ],
        "summary" : "Update an existing product",
        "operationId" : "update_products",
        "requestBody" : {
          "description" : "Product object that needs to be updated",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateProduct"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Product updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "products" ],
        "summary" : "Delete an existing product",
        "operationId" : "delete_products",
        "responses" : {
          "204" : {
            "description" : "Product deleted.",
            "content" : { }
          },
          "400" : {
            "description" : "Product has still linked items which must be deleted first."
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/products" : {
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Get all products",
        "description" : "Returns an array of all products in the repository",
        "operationId" : "get_products",
        "parameters" : [ {
          "in" : "query",
          "name" : "sort_by",
          "schema" : {
            "type" : "string"
          },
          "description" : "The sorting of the result. e.g. name.asc, id.desc"
        }, {
          "in" : "query",
          "name" : "query",
          "schema" : {
            "type" : "string"
          },
          "description" : "Filter applied to the name and description of the products."
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayOfProducts"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "products" ],
        "summary" : "Add a new product to the repository",
        "operationId" : "create_products",
        "requestBody" : {
          "description" : "Product object that needs to be added to the repository",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateProduct"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "New product resource created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Product"
                }
              }
            }
          },
          "400" : {
            "description" : "barcode is already existent",
            "content" : { }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/fridges" : {
      "get" : {
        "tags" : [ "fridges" ],
        "operationId" : "get_fridges",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayOfFridges"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Add a new fridge.",
        "description" : "",
        "operationId" : "create_fridges",
        "requestBody" : {
          "description" : "Fridge that needs to be created",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BaseFridge"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "New fridge resource created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fridge"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "fridges" ]
      }
    },
    "/fridges/{uuid}" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "UUID to identify a fridge",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Get fridge by UUID",
        "description" : "",
        "operationId" : "get_fridge_by_uuid",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fridge"
                }
              }
            }
          },
          "404" : {
            "description" : "Fridge not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "fridges" ]
      },
      "delete" : {
        "summary" : "Delete existing fridge",
        "description" : "",
        "operationId" : "delete_fridge",
        "responses" : {
          "204" : {
            "description" : "Fridge deleted.",
            "content" : { }
          },
          "404" : {
            "description" : "Fridge not found"
          },
          "401" : {
            "description" : "Unauthorized to delete the fridge."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "fridges" ]
      }
    },
    "/fridges/{uuid}/owners" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "UUID to identify a fridge",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "Members of a specific fridge",
      "post" : {
        "summary" : "Add users as owners to a fridge.",
        "description" : "",
        "operationId" : "add_owners",
        "requestBody" : {
          "description" : "UUID of user that should be added as owner",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Owner"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User added as owner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fridge"
                }
              }
            }
          },
          "404" : {
            "description" : "Fridge not found"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "owners" ]
      }
    },
    "/fridges/{uuid}/owners/{user_uuid}" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "UUID to identify a fridge",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "user_uuid",
        "in" : "path",
        "description" : "UUID of user",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "Member of a fridge's owners",
      "delete" : {
        "summary" : "Remove user from the owners of a fridge.",
        "description" : "",
        "operationId" : "delete_owners",
        "responses" : {
          "204" : {
            "description" : "User removed from owners.",
            "content" : { }
          },
          "404" : {
            "description" : "Fridge not found"
          },
          "401" : {
            "description" : "Unauthorized to modify owners from this fridge."
          },
          "400" : {
            "description" : "The creator of a fridge cannot be deleted"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "owners" ]
      }
    },
    "/fridges/{uuid}/items" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "UUID to identify a fridge",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "Represent the items in a fridge.",
      "get" : {
        "summary" : "Get all items in a specified fridge.",
        "description" : "",
        "operationId" : "get_fridge_items",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayOfItems"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "items" ]
      },
      "post" : {
        "summary" : "Adds a new item into the fridge.",
        "description" : "",
        "operationId" : "add_item_to_fridge",
        "requestBody" : {
          "description" : "New item that should be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BaseItem"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "New item added to the fridge",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Item"
                }
              }
            }
          },
          "400" : {
            "description" : "product reference or qty is missing"
          },
          "404" : {
            "description" : "Fridge not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "items" ]
      }
    },
    "/fridges/{uuid}/items/{item_uuid}" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "UUID to identify a fridge",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      }, {
        "name" : "item_uuid",
        "in" : "path",
        "description" : "UUID of item",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "summary" : "A specific item in a fridge.",
      "get" : {
        "summary" : "Get a specific item by it's UUID",
        "description" : "",
        "operationId" : "get_fridge_item",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Item"
                }
              }
            }
          },
          "404" : {
            "description" : "Fridge or Item not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "items" ]
      },
      "put" : {
        "summary" : "Updates an existing item in a fridge identified by UUID",
        "description" : "",
        "operationId" : "update_fridge_item",
        "requestBody" : {
          "description" : "Updated item.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PutItem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Item"
                }
              }
            }
          },
          "404" : {
            "description" : "Fridge or Item not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "items" ]
      },
      "delete" : {
        "summary" : "Remove an item from the fridge.",
        "description" : "",
        "operationId" : "delete_item_from_fridge",
        "responses" : {
          "204" : {
            "description" : "Item deleted",
            "content" : { }
          },
          "404" : {
            "description" : "Fridge or Item not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "items" ]
      }
    },
    "/users" : {
      "summary" : "Members of a specific fridge",
      "head" : {
        "operationId" : "check_user",
        "parameters" : [ {
          "in" : "query",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "description" : "Filters a for a username"
        }, {
          "in" : "query",
          "name" : "email",
          "schema" : {
            "type" : "string"
          },
          "description" : "Filters a for an email"
        } ],
        "responses" : {
          "204" : {
            "description" : "No users found",
            "content" : { }
          },
          "200" : {
            "description" : "Users existing the filters",
            "content" : { }
          }
        },
        "tags" : [ "users" ]
      },
      "get" : {
        "operationId" : "get_user",
        "parameters" : [ {
          "in" : "query",
          "name" : "username",
          "schema" : {
            "type" : "string"
          },
          "description" : "Filters a for a username"
        }, {
          "in" : "query",
          "name" : "email",
          "schema" : {
            "type" : "string"
          },
          "description" : "Filters a for an email"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of matching users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayOfUsers"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ]
      },
      "post" : {
        "summary" : "Register a new user.",
        "description" : "",
        "operationId" : "create_user",
        "requestBody" : {
          "description" : "UUID of user that should be added as owner",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PostUser"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "User created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Username, email password are mandatory."
          }
        },
        "tags" : [ "users" ]
      }
    },
    "/jwt-token" : {
      "summary" : "Tokens for authentication",
      "post" : {
        "operationId" : "get_jwttoken",
        "responses" : {
          "200" : {
            "description" : "success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tokens"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ],
        "tags" : [ "tokens" ]
      }
    },
    "/users/email/{email}" : {
      "parameters" : [ {
        "name" : "email",
        "in" : "path",
        "description" : "E-Mail address identifying the user",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "summary" : "Get user with this email address..",
        "description" : "",
        "operationId" : "get_user_by_email",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicUser"
                }
              }
            }
          },
          "404" : {
            "description" : "Fridge not found"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ]
      }
    },
    "/users/{uuid}" : {
      "parameters" : [ {
        "name" : "uuid",
        "in" : "path",
        "description" : "uuid identifying the user",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "delete" : {
        "summary" : "Remove user.",
        "description" : "",
        "operationId" : "delete_users",
        "responses" : {
          "204" : {
            "description" : "User deleted.",
            "content" : { }
          },
          "404" : {
            "description" : "User not found"
          },
          "401" : {
            "description" : "Unauthorized to delete user."
          },
          "423" : {
            "description" : "The admin user cannot be deleted"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ],
        "tags" : [ "users" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BaseProduct" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "barcode" : {
            "type" : "string"
          },
          "qty" : {
            "type" : "integer",
            "format" : "int64"
          },
          "qty_type" : {
            "type" : "string",
            "enum" : [ "gramm", "milliliter", "pieces" ]
          },
          "imgurl" : {
            "type" : "string"
          },
          "nutrient" : {
            "type" : "object",
            "properties" : {
              "carbs" : {
                "type" : "number",
                "format" : "float"
              },
              "carbs_sugar" : {
                "type" : "number",
                "format" : "float"
              },
              "energy_kcal" : {
                "type" : "integer"
              },
              "fat" : {
                "type" : "number",
                "format" : "float"
              },
              "fat_saturated" : {
                "type" : "number",
                "format" : "float"
              },
              "fiber" : {
                "type" : "number",
                "format" : "float"
              },
              "protein" : {
                "type" : "number",
                "format" : "float"
              },
              "salt" : {
                "type" : "number",
                "format" : "float"
              },
              "nutrientbase" : {
                "type" : "string",
                "enum" : [ "hundred_gramm", "hundred_milliliter" ]
              }
            }
          }
        }
      },
      "CreateProduct" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseProduct"
        }, {
          "required" : [ "category" ],
          "type" : "object",
          "properties" : {
            "category" : {
              "type" : "string"
            }
          }
        } ]
      },
      "Product" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseProduct"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "creator" : {
              "type" : "string"
            },
            "category" : {
              "$ref" : "#/components/schemas/Category"
            }
          }
        } ]
      },
      "ArrayOfProducts" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Product"
        }
      },
      "BaseFridge" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "Fridge" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseFridge"
        }, {
          "type" : "object",
          "properties" : {
            "owner" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PublicUser"
              }
            },
            "creator" : {
              "$ref" : "#/components/schemas/PublicUser"
            }
          }
        } ]
      },
      "ArrayOfFridges" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Fridge"
        }
      },
      "PublicUser" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "displayname" : {
            "type" : "string"
          }
        }
      },
      "User" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/PublicUser"
        }, {
          "type" : "object",
          "properties" : {
            "email" : {
              "type" : "string"
            },
            "isadmin" : {
              "type" : "boolean"
            },
            "username" : {
              "type" : "string"
            }
          }
        } ]
      },
      "PostUser" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "displayname" : {
            "type" : "string"
          }
        }
      },
      "Owner" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string",
            "format" : "uuid"
          }
        }
      },
      "ArrayOfUsers" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/User"
        }
      },
      "BaseItem" : {
        "required" : [ "barcode", "qty" ],
        "type" : "object",
        "properties" : {
          "barcode" : {
            "type" : "string"
          },
          "expiry" : {
            "type" : "string",
            "format" : "date"
          },
          "qty" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "Item" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseItem"
        }, {
          "type" : "object",
          "properties" : {
            "fridge" : {
              "type" : "string",
              "format" : "uuid"
            },
            "created" : {
              "type" : "string",
              "format" : "date"
            },
            "initQty" : {
              "type" : "number",
              "format" : "float"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        } ]
      },
      "PutItem" : {
        "type" : "object",
        "properties" : {
          "expiry" : {
            "type" : "string",
            "format" : "date"
          },
          "qty" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "ArrayOfItems" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Item"
        }
      },
      "Category" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          }
        }
      },
      "Tokens" : {
        "type" : "object",
        "properties" : {
          "refresh_token" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          }
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      },
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}